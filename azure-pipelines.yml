trigger:
  branches:
    include:
      - azure-pipelines

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  targetFramework: 'net9.0-windows10.0.19041.0'
  solutionDir: 'Nano.SPC'
  artifactName: 'Nano.SPC_Installer'

steps:

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '9.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: dotnet workload install maui
  displayName: 'Install MAUI Workload'

- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '$(solutionDir)'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '$(solutionDir)'
    arguments: '-c $(buildConfiguration) -f:$(targetFramework)'

- task: DownloadSecureFile@1
  name: downloadCert
  inputs:
    secureFile: 'cert.pfx'

- task: PowerShell@2
  displayName: 'Install Signing Certificate'
  inputs:
    targetType: 'inline'
    script: |
      $certPath = "$(downloadCert.secureFilePath)"
      certutil -user -p "$(SIGNING_CERTIFICATE_PASSWORD)" -silent -importpfx $certPath NoRoot

- task: DotNetCoreCLI@2
  displayName: 'Publish with Appx'
  inputs:
    command: 'publish'
    projects: '$(solutionDir)'
    arguments: >
      -c $(buildConfiguration)
      -f:$(targetFramework)
      /p:GenerateAppxPackageOnBuild=true
      /p:AppxPackageSigningEnabled=true
      /p:PackageCertificateThumbprint=$(SIGNING_CERTIFICATE_THUMBPRINT)

- task: PowerShell@2
  name: extractVersion
  displayName: 'Extract ApplicationDisplayVersion'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$xml = Get-Content "$(solutionDir)/Nano.SPC.csproj"
      $version = $xml.Project.PropertyGroup.ApplicationDisplayVersion.Trim()
      Write-Host "##vso[task.setvariable variable=AppVersion]$version"

- task: PowerShell@2
  displayName: 'Rename Installer and Certificate'
  inputs:
    targetType: 'inline'
    script: |
      $version = "$(AppVersion)"
      $basePath = "$(solutionDir)/bin/$(buildConfiguration)/$(targetFramework)/win10-x64/AppPackages/Nano.SPC_${version}.0_Test"
      $msixPath = "$basePath/Nano.SPC_${version}.0_x64.msix"
      $cerPath = "$basePath/Nano.SPC_${version}.0_x64.cer"

      if (Test-Path $msixPath) {
        Rename-Item $msixPath "$basePath/AutoUpdate.msix"
      } else {
        Write-Host "MSIX file not found: $msixPath"
        Exit 1
      }

      if (Test-Path $cerPath) {
        Rename-Item $cerPath "$basePath/Nano.SPC.cer"
      } else {
        Write-Host "CER file not found: $cerPath"
        Exit 1
      }

- task: PublishBuildArtifacts@1
  displayName: 'Publish Installer Artifacts'
  inputs:
    PathtoPublish: '$(solutionDir)/bin/$(buildConfiguration)/$(targetFramework)/win10-x64/AppPackages/Nano.SPC_$(AppVersion).0_Test'
    ArtifactName: '$(artifactName)'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish AppInstaller file'
  inputs:
    PathtoPublish: '$(solutionDir)/Nano.SPC.appinstaller'
    ArtifactName: 'AppInstaller'
    publishLocation: 'Container'
